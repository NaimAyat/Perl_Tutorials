----- Notes on Chapters 1, 2, and 3 of Beginning Perl (Simon Cozens, 2000). -----

--------------------------------- SCALARS --------------------------------------

To assign a scalar, use $:
	$myScalar = 31
	$myOtherScalar = "Hello"
	# Perl does not require type to be stated.

Lists are automatically flattened.
	Ex: (1, 2, 3, 4) is the same as ((1, 2), (3, 4)).

Good practice to start every program with: 
	#!/usr/bin/perl
	use warnings;
	use strict;

print("apple", "banana", "carrot") [2];
# prints "carrot"

print("apple", "banana", "carrot") [-1];
# also prints "carrot"

print("apple", "banana", "carrot") [1.9];
# prints "banana" because perl floors the number

We can assign vars in a list with another list:
	($varOne, $varTwo) = (1, 2);

print("apple", "banana", "carrot") [$varOne, $varTwo];
# prints "bananacarrot"

Ranges: use ".." like this:
	print (1..6);
	# prints 123456

print(reverse("this","that"));
# prints the list backwards, so "thatthis"

--------------------------------- ARRAYS ---------------------------------------

To assign an array, use @:
	@myArray = (1, 2, 3)

To get array length in a scalar:
	$scalar = @myArray;
is the same as
	$scalar = 3;

To stringify an array:
	$scalar = "@myArray\n";
is the same as
	$scalar = "1 2 3\n";

Adding to an array:
	@array1 = (1, 2, 3);
	@array2 = (@array1, 4, 5, 6);
	print "array2\n";
	# prints "1 2 3 4 5 6"

Another way to get array length:
	print scalar @array1;
	# prints 3

To get an element in an array:
	@array = ("a", "b", "c")
	$element = $array[0];
	# we use "$array" instead of "@array" in the above statement because we
	# are getting a scalar, not a list

To get an array slice:
	@sales = (401, 512, 841, 926);
	print ("@sales[1..3]\n");
	# prints "512 841 926" plus newline
	print (@sales[1..3]):
	# prints "512841926"

Swap two variables:
	($varOne, $varTwo) = ($varTwo, $varOne);

Swap two array elements:
	@array[3,4] = @array[4,3];

Special $_ variable:
When processing a "for" loop, $_ becomes each element of the list or array.
For example:
	my @array = (1, 2, 3);
	for (@array) {
	    $_ *= 10;
	}
	print "@array\n"
	# will print "10, 20, 30" plus newline

To get the position of last element in an array, use $#array:
	my @array = qw(alpha bravo charlie delta);
	print (scalar @array, "\n");
	print ($#array, "\n");
	# will print 4 and then 3, since 4 is length and 3 is pos of last element

So to do a for loop from 0 to last element, do:
	for (0..$#array);

Pop/push with arrays:
	$poppedElement = pop @array;
	# pops the last element off of @array and puts it in $poppedElement
	push @array, $poppedElement;
	# pushes the element back onto the end of the  array

Shift/unshift with arrays:
Same as pop/push, but for the front of an array.
	$shiftedElement = shift @array;
	# removes the first element of the array and puts it in $shiftedElement
	unshift @array, $shiftedElement;
	# puts the element back at the front of the array

Sort: operator that takes a list and puts it in ASCII (string) order.
	my @array = (4, 1, 3, 2);
	my @sortedArray = sort @array;

To sort in numeric order:
	my @array = (3, 11, 1, 34, 4);
	my @ASCIISortedArray = sort {$a cmp $b};	# 1, 11, 3, 34, 4
	my @numericallySortedArray = sort {$a <=> $b};  # 1, 3, 4, 11, 34

--------------------------------- HASHES ---------------------------------------

To declare a hash, use % in one of two ways:
   1. List of pairs:
      %newHash=(
		"Naim", "Ayat",
		"John", "Doe",
		"Jane", "Doe",
      );
   2. List of pairs denoted by =>. Same as a comma, but everything on
      the left is automatically treated as a double-quoted string.
      %newHash=(
		Naim => "Ayat",
		John => "Doe",
		Jane => "Doe",
      );
Note: scalars on the left are called hash keys, scalars on the right are called
values. Hash keys must be unique.

Convert from array to hash:
	@array = ("Naim", "Ayat", "John", "Doe", "Jane", "Doe");
	%newHash = @array;

Convert from hash to array:
	@array = %newHash;
Note: hashes are unordered, apart from the fact that values will always follow their keys.
Be careful when converting from hash to array.

To reverse the positions of hash keys and values:
	@array = %newHash
	%reversedHash = reverse @array
Note: if two values were the same, converting them to keys means that one will be lost.

To add an entry to a hash:
	$newHash{George} = "Washington";
	print "George's last name is $newHash{George}\n";

To delete a hash entry:
	delete ($newHash{George});

To loop through a hash, use the keys function:
	for (keys %newHash){
	    print "$_'s last name is $newHash{$_}\n";
	}
________________________________________________________________________________
